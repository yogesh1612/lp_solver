## user inputs
n0 = 2  # num of decision variables. select from dropdown.
n1 = 2 # num of constraints. dropdown.
obj.type = "max" # alternately, "min"
int0 = "TRUE"  # default. if "TRUE" ony integer soln is found

obj.func.string = "sales = 25x1 +20*x2" # give field for writing this. user inputs only the string

# make n1 fields for accepting constraint input.
constr1 = "20x1 + 12x2 <= 1800" # resource constraint 
constr2 = "4x1 + 4x2 <= 480" # time constraint 


# parse obj func and ID coeffs
parse_obj_fn <- function(str1){
  obj.in = str_replace_all(str1, "[\\*\\s]?x\\d+", "x") %>% 
    str_extract_all(., "[-]?\\s?\\d+x") %>% unlist() %>%
    str_extract_all("[-]?\\d+") %>% 
    unlist() %>% as.numeric()
  return(obj.in)}

# parse constr and ID coeffs for constr.mat
parse_constr <- function(constr1){
  constr.in = str_replace_all(constr1, "\\*?x\\d+", "x") %>% 
    str_extract_all(., "[-]?\\s?\\d+") %>% unlist() %>% 
    str_replace_all(., "\\s", "") %>%
    unlist() %>% as.numeric()
  return(constr.in)}

# create shell objs to populate
constr = c(constr1, constr2) # binding user input into a list
constr.mat = matrix(0, nrow=n1, ncol=n0); constr.mat

constr.rhs = matrix(0, nrow=n1, ncol=1); constr.rhs
constr.dir = vector(mode="list", length=n1)  # Const.dir<-c("<","<=")

obj.in = parse_obj_fn(obj.func.string); obj.in

for (i0 in 1:n1){
  a0 = parse_constr(constr[i0]); a0
  constr.mat[i0, 1:n0] = a0[1:n0]
  constr.rhs[i0, 1] = a0[length(a0)]
  constr.dir[i0] = str_extract_all(constr[i0], "[<>=]")[[1]] %>% 
    str_c(collapse="") %>% unlist()
}
constr.dir = constr.dir %>% unlist()
# run LP solver
if (int0 == "TRUE"){
  optimum <- lp(direction=obj.type, obj.in, constr.mat, constr.dir, constr.rhs, all.int=T)
} else {
  
  optimum <- lp(direction=obj.type, obj.in, constr.mat, constr.dir, constr.rhs)    
}

# prep output for display
varnames0 = vector(mode="list", length=n0) 
for (i in 1:n0){varnames0[i] = paste0("x",i)}
varnames0 = varnames0 %>% unlist()

solution_df = data.frame(variable = varnames0, value = optimum$solution)
solution_df  # display this



#------- Q2------#
# let num of 4P, 3P and woodBlox = x1, x2 and x3 resp. Then UI inputs are:
n0 = 3 # num of decision vars
n1 = 4 # num of constraints
int0 = "TRUE"  # whether solution is integer or real num. UI needed

obj.func.string = "cost = 30*x1 + 40*x2 + 80*x3"
obj.type = "min"  # "max" is other option
constr1 = "4x1 + 3x2 - 20x3 <= 200"
constr2 = "1x1 + 1*x2 - 10x3 <= 500"
constr3 = "1x1 + 0x2 - 2x3 <= 100"
constr4 = "1x1 + 1x2 + 0*x3 >= 1000"

constr = c(constr1, constr2, constr3, constr4)
constr.mat = matrix(0, nrow=n1, ncol=n0); constr.mat
constr.rhs = matrix(0, nrow=n1, ncol=1); constr.rhs

constr.dir = vector(mode="list", length=n1)  # Const.dir<-c("<","<="
obj.in = parse_obj_fn(obj.func.string); obj.in

for (i0 in 1:n1){
  a0 = parse_constr(constr[i0]); a0
  constr.mat[i0, 1:n0] = a0[1:n0]
  constr.rhs[i0, 1] = a0[length(a0)]
  constr.dir[i0] = str_extract_all(constr[i0], "[<>=]")[[1]] %>% 
    str_c(collapse="") %>% unlist()
}
constr.dir = constr.dir %>% unlist()
constr.mat; constr.rhs; constr.dir

# run LP solver
if (int0 == "TRUE"){
  optimum <- lp(direction=obj.type, obj.in, constr.mat, constr.dir, constr.rhs, all.int=T)
} else {
  
  optimum <- lp(direction=obj.type, obj.in, constr.mat, constr.dir, constr.rhs)    
}

# prep output for display
varnames0 = vector(mode="list", length=n0) 
for (i in 1:n0){varnames0[i] = paste0("x",i)}
varnames0 = varnames0 %>% unlist()

solution_df = data.frame(variable = varnames0, value = optimum$solution)
solution_df
